The JavaScript Tree:
|
|‚îÄ‚îÄ Variables
| ‚îú‚îÄ‚îÄ var
| ‚îú‚îÄ‚îÄ let
| ‚îî‚îÄ‚îÄ const
|
|‚îÄ‚îÄ Data Types
| ‚îú‚îÄ‚îÄ String
| ‚îú‚îÄ‚îÄ Number
| ‚îú‚îÄ‚îÄ Boolean
| ‚îú‚îÄ‚îÄ Object
| ‚îú‚îÄ‚îÄ Array
| ‚îú‚îÄ‚îÄ Null
| ‚îî‚îÄ‚îÄ Undefined
|
|‚îÄ‚îÄ Operators
| ‚îú‚îÄ‚îÄ Arithmetic
| ‚îú‚îÄ‚îÄ Assignment
| ‚îú‚îÄ‚îÄ Comparison
| ‚îú‚îÄ‚îÄ Logical
| ‚îú‚îÄ‚îÄ Unary
| ‚îî‚îÄ‚îÄ Ternary (Conditional)
|
|‚îÄ‚îÄ Control Flow
| ‚îú‚îÄ‚îÄ if statement
| ‚îú‚îÄ‚îÄ else statement
| ‚îú‚îÄ‚îÄ else if statement
| ‚îú‚îÄ‚îÄ switch statement
| ‚îú‚îÄ‚îÄ for loop
| ‚îú‚îÄ‚îÄ while loop
| ‚îî‚îÄ‚îÄ do-while loop
|
|‚îÄ‚îÄ Functions
| ‚îú‚îÄ‚îÄ Function declaration
| ‚îú‚îÄ‚îÄ Function expression
| ‚îú‚îÄ‚îÄ Arrow function
| ‚îî‚îÄ‚îÄ IIFE (Immediately Invoked Function Expression)
|
|‚îÄ‚îÄ Scope
| ‚îú‚îÄ‚îÄ Global scope
| ‚îú‚îÄ‚îÄ Local scope
| ‚îú‚îÄ‚îÄ Block scope
| ‚îî‚îÄ‚îÄ Lexical scope
|
|‚îÄ‚îÄ Arrays
| ‚îú‚îÄ‚îÄ Array methods
| | ‚îú‚îÄ‚îÄ push()
| | ‚îú‚îÄ‚îÄ pop()
| | ‚îú‚îÄ‚îÄ shift()
| | ‚îú‚îÄ‚îÄ unshift()
| | ‚îú‚îÄ‚îÄ splice()
| | ‚îú‚îÄ‚îÄ slice()
| | ‚îî‚îÄ‚îÄ concat()
| ‚îî‚îÄ‚îÄ Array iteration
| ‚îú‚îÄ‚îÄ forEach()
| ‚îú‚îÄ‚îÄ map()
| ‚îú‚îÄ‚îÄ filter()
| ‚îî‚îÄ‚îÄ reduce()
|
|‚îÄ‚îÄ Objects
| ‚îú‚îÄ‚îÄ Object properties
| | ‚îú‚îÄ‚îÄ Dot notation
| | ‚îî‚îÄ‚îÄ Bracket notation
| ‚îú‚îÄ‚îÄ Object methods
| | ‚îú‚îÄ‚îÄ Object.keys()
| | ‚îú‚îÄ‚îÄ Object.values()
| | ‚îî‚îÄ‚îÄ Object.entries()
| ‚îî‚îÄ‚îÄ Object destructuring
|
|‚îÄ‚îÄ Promises
| ‚îú‚îÄ‚îÄ Promise states
| | ‚îú‚îÄ‚îÄ Pending
| | ‚îú‚îÄ‚îÄ Fulfilled
| | ‚îî‚îÄ‚îÄ Rejected
| ‚îú‚îÄ‚îÄ Promise methods
| | ‚îú‚îÄ‚îÄ then()
| | ‚îú‚îÄ‚îÄ catch()
| | ‚îî‚îÄ‚îÄ finally()
| ‚îî‚îÄ‚îÄ Promise.all()
|
|‚îÄ‚îÄ Asynchronous JavaScript
| ‚îú‚îÄ‚îÄ Callbacks
| ‚îú‚îÄ‚îÄ Promises
| ‚îî‚îÄ‚îÄ Async/Await
|
|‚îÄ‚îÄ Error Handling
| ‚îú‚îÄ‚îÄ try...catch statement
| ‚îî‚îÄ‚îÄ throw statement
|
|‚îÄ‚îÄ JSON (JavaScript Object Notation)
|
|‚îÄ‚îÄ Modules
| ‚îú‚îÄ‚îÄ import
| ‚îî‚îÄ‚îÄ export
|
|‚îÄ‚îÄ DOM Manipulation
| ‚îú‚îÄ‚îÄ Selecting elements
| ‚îú‚îÄ‚îÄ Modifying elements
| ‚îî‚îÄ‚îÄ Creating elements
|
|‚îÄ‚îÄ Events
| ‚îú‚îÄ‚îÄ Event listeners
| ‚îú‚îÄ‚îÄ Event propagation
| ‚îî‚îÄ‚îÄ Event delegation
|
|‚îÄ‚îÄ AJAX (Asynchronous JavaScript and XML)
|
|‚îÄ‚îÄ Fetch API
|
|‚îÄ‚îÄ ES6+ Features
| ‚îú‚îÄ‚îÄ Template literals
| ‚îú‚îÄ‚îÄ Destructuring assignment
| ‚îú‚îÄ‚îÄ Spread/rest operator
| ‚îú‚îÄ‚îÄ Arrow functions
| ‚îú‚îÄ‚îÄ Classes
| ‚îú‚îÄ‚îÄ let and const
| ‚îú‚îÄ‚îÄ Default parameters
| ‚îú‚îÄ‚îÄ Modules
| ‚îî‚îÄ‚îÄ Promises
|
|‚îÄ‚îÄ Web APIs
| ‚îú‚îÄ‚îÄ Local Storage
| ‚îú‚îÄ‚îÄ Session Storage
| ‚îî‚îÄ‚îÄ Web Storage API
|
|‚îÄ‚îÄ Libraries and Frameworks
| ‚îú‚îÄ‚îÄ React
| ‚îú‚îÄ‚îÄ Angular
| ‚îî‚îÄ‚îÄ Vue.js
|
|‚îÄ‚îÄ Debugging
| ‚îú‚îÄ‚îÄ Console.log()
| ‚îú‚îÄ‚îÄ Breakpoints
| ‚îî‚îÄ‚îÄ DevTools
|
|‚îÄ‚îÄ Others
| ‚îú‚îÄ‚îÄ Closures
| ‚îú‚îÄ‚îÄ Callbacks
| ‚îú‚îÄ‚îÄ Prototypes
| ‚îú‚îÄ‚îÄ this keyword
| ‚îú‚îÄ‚îÄ Hoisting
| ‚îî‚îÄ‚îÄ Strict mode
|
|____________ END __________________

________________________________________________

JavaScript was Complicated.
Learning these concepts made it easier for me:
ùü≠. ùó©ùóÆùóøùó∂ùóÆùóØùóπùó≤ùòÄ ùóÆùóªùó± ùóóùóÆùòÅùóÆ ùóßùòÜùóΩùó≤ùòÄ:
-> Declaration (`var`, `let`, `const`)
-> Primitive data types (strings, numbers, booleans, null, undefined)
-> Complex data types (arrays, objects, functions)
-> Type coercion and conversion
ùüÆ. ùó¢ùóΩùó≤ùóøùóÆùòÅùóºùóøùòÄ ùóÆùóªùó± ùóòùòÖùóΩùóøùó≤ùòÄùòÄùó∂ùóºùóªùòÄ:
-> Arithmetic operators (+, -, *, /, %)
-> Assignment operators (=, +=, -=, *=, /=, %=)
-> Comparison operators (==, ===, !=, !==, <, >, <=, >=)
-> Logical operators (&&, || , !)
-> Ternary operator (conditional operator)
ùüØ. ùóñùóºùóªùòÅùóøùóºùóπ ùóôùóπùóºùòÑ:
-> Conditional statements (`if`, `else if`, `else`)
-> Switch statement
-> Loops (`for`, `while`, `do-while`)
-> Break and continue statements
ùü∞. ùóôùòÇùóªùó∞ùòÅùó∂ùóºùóªùòÄ:
-> Function declaration and expression
-> Arrow functions
-> Parameters and arguments
-> Return statement
-> Scope (global scope, function scope, block scope)
-> Closures
-> Callback functions
ùü±. ùóîùóøùóøùóÆùòÜùòÄ ùóÆùóªùó± ùó¢ùóØùó∑ùó≤ùó∞ùòÅùòÄ:
-> Creation and initialization
-> Accessing and modifying elements
-> Array methods (push, pop, shift, unshift, splice, slice, concat, etc.)
-> Object properties and methods
-> JSON (JavaScript Object Notation)
ùü≤. ùóñùóπùóÆùòÄùòÄùó≤ùòÄ ùóÆùóªùó± ùó£ùóøùóºùòÅùóºùòÅùòÜùóΩùó≤ùòÄ:
-> Class syntax (constructor, methods, static methods)
-> Inheritance
-> Prototypal inheritance
-> Object.create() and Object.setPrototypeOf()
ùü≥. ùóòùóøùóøùóºùóø ùóõùóÆùóªùó±ùóπùó∂ùóªùó¥:
-> Try...catch statement
-> Throwing errors
-> Error objects (Error, SyntaxError, TypeError, etc.)
-> Error handling best practices
ùü¥. ùóîùòÄùòÜùóªùó∞ùóµùóøùóºùóªùóºùòÇùòÄ ùóùùóÆùòÉùóÆùó¶ùó∞ùóøùó∂ùóΩùòÅ:
-> Callbacks
-> Promises (creation, chaining, error handling)
-> Async/await syntax
-> Fetch API
-> setTimeout() and setInterval()
ùüµ. ùóóùó¢ùó† ùó†ùóÆùóªùó∂ùóΩùòÇùóπùóÆùòÅùó∂ùóºùóª:
-> Selecting DOM elements
-> Modifying element properties and attributes
-> Creating and removing elements
-> Traversing the DOM
ùü≠ùü¨. ùóòùòÉùó≤ùóªùòÅ ùóõùóÆùóªùó±ùóπùó∂ùóªùó¥:
-> Adding event listeners
-> Event objects
-> Event propagation (bubbling and capturing)
-> Event delegation
ùü≠ùü≠. ùó†ùóºùó±ùòÇùóπùó≤ùòÄ ùóÆùóªùó± ùó†ùóºùó±ùòÇùóπùóÆùóøùó∂ùòáùóÆùòÅùó∂ùóºùóª:
-> ES6 modules (import/export)
-> CommonJS modules (require/module.exports)
-> Module bundlers (Webpack, Rollup)
ùü≠ùüÆ. ùóïùóøùóºùòÑùòÄùó≤ùóø ùóñùóºùó∫ùóΩùóÆùòÅùó∂ùóØùó∂ùóπùó∂ùòÅùòÜ ùóÆùóªùó± ùó£ùó≤ùóøùó≥ùóºùóøùó∫ùóÆùóªùó∞ùó≤:
-> Cross-browser compatibility
-> Performance optimization techniques
-> Minification and code splitting
-> Lazy loading

_________________________________________________________


_____________________________________________________________

[6/3, 11:36 AM] Srikanth Shanmukesh: Here we go with the list
[6/3, 11:37 AM] Srikanth Shanmukesh: Javascripts arrays and objects built in usecases
[6/3, 11:38 AM] Srikanth Shanmukesh: Examples must read
[6/3, 11:38 AM] Srikanth Shanmukesh: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array
[6/3, 11:38 AM] Srikanth Shanmukesh: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object
[6/3, 11:38 AM] Srikanth Shanmukesh: Json manipulations traversing lookups
[6/3, 11:39 AM] Srikanth Shanmukesh: Iife closures
[6/3, 11:39 AM] Srikanth Shanmukesh: Call and apply
[6/3, 11:39 AM] Srikanth Shanmukesh: Async and await
[6/3, 11:40 AM] Srikanth Shanmukesh: Basic es6 features, arrow let constant
[6/3, 11:40 AM] Srikanth Shanmukesh: Destructuring
[6/3, 11:40 AM] Srikanth Shanmukesh: Template literala
[6/3, 11:41 AM] Srikanth Shanmukesh: Spread and rest operators
[6/3, 11:41 AM] Srikanth Shanmukesh: Json to object etc.,
[6/3, 11:41 AM] Srikanth Shanmukesh: Coming to angular:
[6/3, 11:42 AM] Srikanth Shanmukesh: Components, data sharing in between compnents
[6/3, 11:42 AM] Srikanth Shanmukesh: Basic crud operations
[6/3, 11:42 AM] Srikanth Shanmukesh: Custom pipe example usecase
[6/3, 11:42 AM] Srikanth Shanmukesh: Behavior child
[6/3, 11:43 AM] Srikanth Shanmukesh: Rxjs operators
--------------

Inline elements style or format particular content sections within block-level elements. For example, <span>, <a>, <strong>, and <em> take up only the appropriate width and do not begin on a new line. HTML Block components are used to organize a webpage's major content. They usually begin on a new line and fill the entire container width, e.g., <div>, <p>, <h1> to <h6>, <ul>, etc.

The main difference between ‚Äúdisplay: none‚Äù and ‚Äúvisibility: hidden‚Äù is that the former removes the element from the document flow, while the latter simply hides it. Elements with ‚Äúdisplay: none‚Äù are not visible and do not take up any space on the page, while elements with ‚Äúvisibility: hidden‚Äù are not visible but still take up space.

HTML5 now includes new components that make writing simple, quick code for intricate, dynamic, engaging, and successful websites possible. These new components add improved page layouts, functional features, and other enhancements.

<audio>: Embeds audio content directly into a webpage. It supports multiple audio formats (e.g., MP3, WAV, OGG).  It includes pause, play, and more.
<video>: Embeds video content into a webpage. It supports multiple video formats (e.g., MP4, WebM, Ogg).  It includes attributes like controls, autoplay, loop, and more.
<source>: Defines multiple media resources for <audio> and <video>. It allows browsers to choose the best-supported format.
<track>: Adds text tracks (e.g., captions, subtitles, descriptions) to <audio> or <video> elements. It supports attributes like kind, src, and label.
<embed>: Embeds external content, including multimedia like video or audio, and applications such as PDF viewers. Unlike <audio> and <video>, it is a general-purpose element.


Web Workers provide a simple way for web content to run scripts on background threads. The worker thread can complete tasks without affecting the user interface. They can also use the XMLHttpRequest and fetch() APIs for network requests. 

After it is created, a worker can post messages to an event handler provided by the JavaScript code to convey messages to that code. Web Workers enable long-running tasks to be executed without interrupting user interactions, keeping the UI responsive.

HTML5 is an improved version of HTML that incorporates multi-platform and multimedia compatibility capabilities while also improving HTML. Here are ways in which HTML5 is better than its previous versions:

HTML5 has enhanced the code structure, making it clearer and cleaner for programmers and non-programmers with its numerous new and modified tags. 
HTML5 offers a new cross-browser compatibility capability supported by several mainstream web browser versions rather than being limited to a particular platform or browser. 
HTML5 Web Storage reduces server costs by removing cookies and offering 5 MB of client-side storage space for data storage. This data is stored locally and is not transmitted via the server, making HTML5 Web Storage more secure than prior iterations. 
HTML5 can adjust attributes like controls, loop, autoplay, muted, src, height, width, etc., following the <audio> and <video> tags.
As you prepare for your job interview, we hope these HTML Interview Questions have provided more insight into the questions you will likely encounter.

---

css
________________________________________________
  <link rel="stylesheet" href="styles.css">
  
  Class is a way of using HTML elements for styling. They are not unique and have multiple elements. Whereas ID is unique and it can be assigned to a single element.
  
  This is one of the most frequently asked CSS interview questions. Z-index is used to specify the stack order of elements that overlap each other. Its default value is zero and can take both negative and positive values. A higher z-index value is stacked above the lower index element. It takes the following values- auto, number, initial, and inherit. 
  
  The font-related attributes are Font- style, variant, weight, family, size, etc. 
  
  Universal Selector, Element type Selector, ID selector, Class selector, Descendant combinatory, Child Combinator, General Sibling Combinator, Adjacent sibling combinator, and Attribute selector.
  
  CSS preprocessor is a tool used to enhance the basic functionality and let us use the complex logical syntax such as variables, functions, mixins, and code nesting within vanilla CSS scripts themselves.

Sass (Syntactically Awesome Style Sheets) uses .sass extension. It is used for indentation; it doesn‚Äôt use semicolons or curly brackets.
Less (Leener Stylesheets) uses .less extension. It is easy to add to any JavaScript Project by using NPM or less.js file. Here, @ is used to define the variables. 
Stylus provides great flexibility in writing syntax. It is able to use native CSS as well as the exclusion of brackets, colons, and semicolons. There is no need to use @ or $ to define the variables.
People use SASS, LESS, and Stylus in order to extend the basic functionality of vanilla CSS.

  VH and VW are CSS units used to measure viewport height and viewport width respectively in percentage form in the responsive design techniques. E.g. If the height of the browser is 1000px, then VH is 1/100 of the height of the viewport that is 1000px*(1/100) = 10px, which is the height of the browser.  The same applies to VW (viewport width).
  
  Block Elements are <div> and <p>. They usually start on a new line and can take space for an entire row or width.
Inline elements are <a>, <span>, <strong>, and <img> tags. They don't start on a new line. However, they appear on the same line as the content and tags beside them.
Inline block elements have padding and margins and set height and width values. Though, they are similar to inline elements.  

  Pseudo-classes are the type of pseudo-elements that don‚Äôt exist in a normal document tree. It allows selecting the regular elements under certain conditions especially when we try to hover over the link; the anchor tags are :link, :visited, :hover, :active, :focus

In this example, the color will be red on the anchor tag when it‚Äôs hovered.

/* mouse over link */

a:hover {

color: #FFOOFF;

}



Px (Pixel) is used for fine-grained control and alignment and not cascade. To get it sharp, we can use 1px or multiple of px.
Em is used to maintain relative size and responsive fonts. 1em = 16px having also the same font size. It is advisable to set the font size to 10px in common practice.
Pt (point) is a fixed-size unit that is used in print. 1pt = 1/72 inch.
Percentage (%) is used to set the font size with respect to the font size of the body. Thus, it is necessary to set the reasonable font size of the body.


Content-box inner , Padding-box and Border-box margin top

The CSS grid system is a type of powerful layout of 2 dimensional systems with respect to columns and rows.

center div

.container {
  display: flex;
  justify-content: center;
  align-items: center;
}

.container {
  display: grid;
  place-content: center;
  place-items: center;
}


CSS Grid Layout is a two-dimensional system along with rows and columns. It is used for large-sized layouts.
Flexbox is a Grid layout with a one-dimensional system either within a row or a column. It is used for the components of an application.
_______________________
Call invokes the function and allows you to pass in arguments one by one.
Apply invokes the function and allows you to pass in arguments as an array.
Bind returns a new function, allowing you to pass in a this array and any number of arguments.


assign constant is expression and normal function is declaration 


// Normal Function
const numbers = function(one, two) {}

// Arrow Function, with parentheses
const numbers = (one, two) => {}


const me = () => ({ name: "samantha" });

me(); // { name: "samantha" } ‚úÖ

const me = () => { name: "samantha" };

me(); // undefined üò±